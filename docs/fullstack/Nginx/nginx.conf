# 许多参数都是支持http、server、location单独配置的，可以更颗粒化的的进行配置
# 计算最大连接数 max_clients = worker_processes * worker_connections / 4

# 配置文件基本构成
# 主模块
# 事件模块
# HTTP 标准核心模块
# HTTP Gzip模块
# HTTP SSL模块
# HTTP Proxy模块


###### 主模块 ######
# 运行Nginx Worker的用户名和组名
# user nobody nobody

# 根据系统环境自动设置工作进程数量
worker_processes  auto;

# 设置工作进程数量 
# worker_processes  8;
# 为每个Nginx Worker绑定一个Cpu
# worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;

# Nginx进程可以打开的最大文件描述符数量
# 需要和系统最大打开文件数一致(ulimit -n)
# worker_rlimit_nofile 51200;

###### 事件模块 ######
# 事件模块-处理访问连接的指令集
events {
    # 事件模型(Linux Core > 2.6 need use epoll)
    use epoll
    # 设置每个工作进程数量的最大连接数(默认512)
    worker_connections 51200;
}

http {
    ###### HTTP 核心模块 ######
    # 指定应答MIME-types的扩展名映射(建议直接引用conf/mime.types)
    # types {
    #     text/html html htm shtml
    # }
    
    # 引用MIME-types与扩展名的映射表
    include mime.types;
    # 设置默认请求文件的MIME-type为未知或不可识别的文件类型
    default_type  application/octet-stream;

    # 日志格式-自定义格式名main
    log_format main '$remote_addr - $remote_user [$time_local] $request '
		'"$status" $body_bytes_sent "$http_referer" '
		'"$http_user_agent" "$http_x_forwarded_for"';

    # 日志格式-自定义格式名json
    log_format json '{"time":"$time_local", '
        '"statusCode":"$status", '
        '"bodyLen":"$body_bytes_sent", ' 
        '"ip":"$remote_addr", '
        '"remoteUser":"$remote_user", '
        '"host":"$host", '
        '"url":"$request", ' 
        '"proxy":"$upstream_addr", ' 
        '"ua":"$http_user_agent", '
        '"requestTime":"$request_time", ' 
        '"upstreamTime":"$upstream_response_time", ' 
        '"location":"$sent_http_location", '
        '"upstreamStatus":"$upstream_status", ' 
        '"referer":"$http_referer"}';

    # 是否启动在access日志中记录Rewrite Rules和SSI requests等请求(建议调试的时候可使用)
    # log_subrequest on

    # access日志开关
    # access_log  off;
    # access日志地址、日志格式类型名称
    # access_log  /var/log/nginx/access.log  main;

    # error日志开关
    # error_log  off;
    # error日志地址、日志级别    
    # error_log  /var/log/nginx/error.log  error;
    # error_log  /var/log/nginx/error.log  debug;
    
    # 客户端请求内容缓冲区大小(默认 8k/16k)
    client_body_buffer_size 256k;
    # 客户端请求内容临时文件目录
    # client_body_temp_path /client_body_temp;
    # 读取客户端请求的超时时间(默认60，失败返回408)
    client_body_timeout 10;
    # 客户端请求头内容缓存区大小(默认1k)
    client_header_buffer_size 128k;
    # 读取客户端请求头的超时时间(默认60，失败返回408) 
	client_header_timeout 10;
    # 允许客户端请求内容的最大值(默认1m，与Content-Length比较，失败返回413)
    client_max_body_size 10m;
    
    # keep-alive超时时间(默认75)
    keepalive_timeout 60 60;
    # keep-alive连接使用最大次数(默认次数100，超过后即使没有超过超时时间也会立即断开。)
    # keepalive_request 100;

    # 发送给客户端的应答超时时间(默认60，如果超过没有应答则关闭连接)
    # send_timeout 10;
    # 是否开启零拷贝
    # sendfile on
    sendfile on;
    # 是否在错误页面或Header中返回Ng版本号
	server_tokens off;

    # 是否启用TCP_NOPUSH技术(默认off，如果开启仅在sendfile开启下生效)
    # tcp_nopush on;
    # 是否启用Nagle算法(默认off，只适用于keep-alive连接)
	# tcp_nodelay on;

    ###### HTTP Gzip模块 ######
    # gzip开关(默认off)
    gzip on;
    # 缓冲单位(默认4 4k/8k，系统以该单位去申请内存)
    gzip_buffers 4 8k;
    # 压缩比
    gzip_comp_level 4;
    # 允许压缩页面最小字节数
	gzip_min_length 1024;
    # 识别http协议版本
	gzip_http_version 1.1;
    # 控制是否对服务器响应结果进行 Gzip 压缩(默认off，需要服务响应结果中的Headers包含Via Header)
    gzip_proxied any;
    # 匹配mime类型进行压缩(HTTP核心模块需要配置或引入MIME-types和扩展名的映射)
	gzip_types text/plain image/x-icon application/x-javascript application/javascript text/css application/xml;
    # 是否启用 Gzip 压缩时添加 Vary: Accept-Encoding 头部(默认off)
    # 启用应答头"Vary: Accept-Encoding"(默认off，作为反向代理和缓存服务器时确保正确处理上游服务器的压缩响应，该参数的主要功能是告诉接收方发送的数据经过了压缩处理，不需要额外处理。)
	gzip_vary on;
    # 禁止启用Gzip压缩的浏览器类型(msie6=IE6)
    gzip_disable "msie6";

    ###### HTTP Header模块 ######
    # 增加Header-提供有关缓存命中状态的信息(HIT-LT表示命中了缓存)
    # add_header X-Cache HIT-LT;

    ###### HTTP Proxy模块 ######
    # 设置从被代理服务器获取的第一应答信息的缓冲区大小(默认4k/8k)
    proxy_buffer_size 4k;
    # 开启对被代理服务器的应答缓存
    proxy_buffering on;
    # 设置从被代理服务器获取的应答信息的缓冲区数目和大小(默认8 4k/8k)
    proxy_buffers 32 32k;
    # 系统繁忙时申请更大的proxy_buffers缓存区
    proxy_busy_buffers_size 64k;
    # proxy_cache指令集-proxy-cache_calid用于设置代理服务器缓存的有效期(参数 响应状态码 缓存时间)
    proxy_cache_valid any 10m;
    # proxy_cache指令集-proxy_cache_path缓存数据存放根目录
    # proxy_cache_path  <path>  levels=1 keys_zone=cache_one:100m max_size=1024m;
    # 与服务端的超时时间(指发起握手的超时时间)
    proxy_connect_timeout 13;
    # 如果客户端自身终止请求，防止中断代理请求
    proxy_ignore_client_abort off;
    # 判断Ng是否会拦截400以上的状态码的应答(on 会拦截error_page明确指定的错误码，其他的将照常发送)
    proxy_intercept_errors on;
    # 用于配置Nginx反向代理服务器的重定向行为。它的作用是在接收到后端服务器的响应后，对其中包含的重定向URL进行修改，然后再将修改后的URL返回给客户端。 
    proxy_redirect off;
    # 从后端被代理服务器读取应答内容的超时时间(指的是TCP进行两次握手之后，TCP状态变为ESTABLISHED的时间)
    proxy_read_timeout 60;
    # 代理服务器转发请求到服务端的超时时间(指的是TCP进行两次握手之后，TCP状态变为ESTABLISHED的时间)
    proxy_send_timeout 21;

    # proxy_set_header重新定义或新增转发到被代理服务器的Headers(默认情况下只允许Host和Connection被重新定义)
    # proxy_set_header - Host(客户端请求的Host头部值复制并设置为后端服务器请求的Host头部值)
    proxy_set_header Host $host;
    # proxy_set_header - Connection(告知后端服务器在发送响应后关闭与客户端的连接，避免保持长连接)
    proxy_set_header Connection close;
    # proxy_set_header - X-Real-IP(将客户端的真实IP地址（即$remote_addr）作为X-Real-IP头部的值传递给后端服务器)
    proxy_set_header X-Real-IP $remote_addr;
    # proxy_set_header - X-Forwarded-For(设置了X-Forwarded-For头部，它包含了客户端的真实IP地址以及之前经过的代理服务器的IP地址)
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # 配置与上游服务器进行SSL/TLS 连接所需的证书
    proxy_ssl_certificate <server.crt path>
    # 配置与上游服务器进行SSL/TLS 连接所需的私钥
    proxy_ssl_certificate_key <server.key path>
    # 设置写入proxy_temp_file临时目录的数据大小(调整防止进程阻塞)
    proxy_temp_file_write_size 64k;
    # 指定写入proxy_temp_file的临时目录
    # proxy_temp_path <path>;

    ###### HTTP SSL模块 ######
    # SSL模块默认不编译进入Nginx，需要在编译时指定参数 ./confrigure --with-http_ssl_module
    # 启用SSL(ssl on或者listen中使用ssl参数开启ssl支持)
    # 设置SSL证书文件
    ssl_certificate  <server.crt path>;
    # 设置SSL证书私钥
    ssl_certificate_key <server.key path>;
    # 指定许可密码的描述(密码由OpenSSL支持的格式指定。openssl ciphers可查看全部支持。)
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256:AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
    # 是否开启SSLv3和TLSv1服务端密码需求优先级高于客户端密码
    ssl_prefer_server_ciphers on; 
    # 设置支持的SSL协议
    #ssl_protocols  SSLv2 SSLv3 TLSv1.2;
    # 客户端能够重复使用缓存中的SSL会话参数时间(默认 5m)
    ssl_session_timeout 1m;

    ###### 常用主机配置(包含各个模块的参数) ######
    # 虚拟主机
    server {
        # 监听80端口(http协议)
        listen 80;
        # 监听80端口(监听所有可用IPV6地址80端口，http协议，开启SSL时不使用)
        listen [::]:80;
        # 监听443端口(https协议)
        listen 443 default ssl;
        # 允许匹配请求的主机名称(_伪名称允许监听所有名称的主机，即使请求头中不包含Host也允许监听)
        server_name _;

        # URL配置
        location ~ ^/web/ {
            # URL重写
            rewrite ^/h5/(.*)$ /$1 break;
            # 指定查找文档根目录
            root <root html path>;
            # 设置默认首页
            index index.html index.htm;
        }
        # URL配置
        location ~ ^/backend/ {
            # 设置被代理服务的IP端口或套接字
            proxy_pass http://<ip>:root;
            # proxy_set_header - Host(客户端请求的Host头部值复制并设置为后端服务器请求的Host头部值)
            proxy_set_header Host $host;
            # proxy_set_header - Connection(告知后端服务器在发送响应后关闭与客户端的连接，避免保持长连接)
            proxy_set_header Connection close;
            # proxy_set_header - X-Real-IP(将客户端的真实IP地址（即$remote_addr）作为X-Real-IP头部的值传递给后端服务器)
            proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header - X-Forwarded-For(设置了X-Forwarded-For头部，它包含了客户端的真实IP地址以及之前经过的代理服务器的IP地址)
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # 引入其他配置文件
    include vhost/*.conf;
}